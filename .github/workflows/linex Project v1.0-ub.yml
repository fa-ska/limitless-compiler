# linex Project
name: linex Project v1.1-ub
on:
  workflow_dispatch:
    inputs:
      ubuntu:
        description: 'Run on'
        default: 'ubuntu-latest'
        required: true
        type: string
      name:
        description: 'Name'
        default: '4.9-kernel_clang'
        required: true
        type: string
      compiler:
        description: 'Compiler | gcc|clang|llvm '
        default: 'gcc'
        required: true
        type: string
      kernel-url:
        description: 'Kernel-url'
        default: 'https://github.com/linex-17/Limitless.git'
        required: true
        type: string
      kernel-branch:
        description: 'Kernel-branch'
        default: 'main'
        required: true
        type: string
      kernel-config:
        description: 'Kernel-config'
        default: 'xi_defconfig'
        required: true
        type: string
      kernelsu:
        description: 'KernelSU | false if source not support'
        default: 'curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.7.6'
        required: true
        type: string
      command:
        description: 'Command+'
        default: 'false'
        required: true
        type: string
      any-kernel3:
        description: 'Any-Kernel3'
        default: 'https://github.com/osm0sis/AnyKernel3'
        required: true
        type: string
        
jobs:
  linex-compiler-v1:
    runs-on: ${{ inputs.ubuntu }}
    steps:
    - name: Checkin
      run: |
         echo "run-on: ${{ inputs.ubuntu }}"
         echo "name: ${{ inputs.name }}"
         echo "compiler: ${{ inputs.compiler }}"
         echo "kernel-url: ${{ inputs.kernel-url }}"
         echo "kernel-branch: ${{ inputs.kernel-branch }}"
         echo "kernel-config: ${{ inputs.kernel-config }}"
         echo "kernelsu: ${{ inputs.kernelsu }}"
         echo "command+: ${{ inputs.command }}"
         echo "any-kernel3: ${{ inputs.any-kernel3 }}"
         echo "linex Project"
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup
      run: |
         sudo apt-get update
         sudo apt-get install --no-install-recommends -y binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3 aria2 clang gcc gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu libffi-dev libncurses5-dev libreadline-dev libsqlite3-dev pigz libarchive-tools software-properties-common openssl ssh wget nano ca-certificates zstd lld llvm g++-aarch64-linux-gnu libelf-dev neofetch
    - name: Setup Kernel
      run: |
         git clone --depth=1 ${{ inputs.kernel-url }} -b ${{ inputs.kernel-branch }} kernel-dir
    - name: Setup KernelSU
      run: |
         if [ ${{ inputs.kernelsu }} != false ]; then
            cd kernel-dir
            rm -rf KernelSU
            ${{ inputs.kernelsu }}
         else
            echo "KernelSU Disable"
         fi
    - name: Compile
      run: |
         mkdir out -p -v
         cd kernel-dir
         export KBUILD_BUILD_USER="linex"
         export KBUILD_BUILD_HOST="project"
         COMMAND="make -j$(nproc --all) ${{ inputs.kernel-config }} ARCH=arm64 O=../out all"
         COMMAND+=" CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- CROSS_COMPILE_COMPAT=arm-linux-gnueabi-"
         if [ ${{ inputs.compiler }} == clang ]; then
            COMMAND+=" CC=clang"
         elif [ ${{ inputs.compiler }} == llvm ]; then
            COMMAND+=" CC=clang"
            COMMAND+=" LLVM=1"
            COMMAND+=" LLVM_IAS=0"
            COMMAND+=" AR=llvm-ar NM=llvm-nm STRIP=llvm-strip OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf HOSTCC=clang HOSTCXX=clang++ HOSTAR=llvm-ar"
         fi
         if [ ${{ inputs.command }} != false ]; then
            COMMAND+=" ${{ inputs.command }}"
         fi
         ${COMMAND}
    - name: AnyKernel3
      run: |
          git clone ${{ inputs.any-kernel3 }} AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md AnyKernel3/modules AnyKernel3/patch AnyKernel3/ramdisk
          
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi
    - name: Upload
      run: |
          mkdir Upload
          cp -rf AnyKernel3/* Upload
    - id: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "${{ inputs.name }}"
        path: Upload/*
    
