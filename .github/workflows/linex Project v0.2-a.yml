# linex Project
name: linex Project v0.2-a
on:
  workflow_dispatch:
    inputs:
      ubuntu:
        description: 'Run on'
        default: 'ubuntu-latest'
        required: true
        type: string
      name:
        description: 'Name'
        default: '4.9-kernel'
        required: true
        type: string
      apt-get:
        description: 'apt-get'
        default: 'sudo apt-get install --no-install-recommends -y gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu lld llvm g++-aarch64-linux-gnu'
        required: true
        type: string
      kernel-source:
        description: 'kernel-source'
        default: 'https://github.com/linex-17/Limitless.git'
        required: true
        type: string
      kernel-branch:
        description: 'kernel-branch'
        default: 'main'
        required: true
        type: string
      kernel-config:
        description: 'kernel-config'
        default: 'xi_defconfig'
        required: true
        type: string
      kernelsu:
        description: 'KernelSU | false if kernel-source not support'
        default: 'curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.7.6'
        required: true
        type: string
      compiler:
        description: 'compiler | gcc|clang|llvm'
        default: 'clang'
        required: true
        type: string
jobs:
  linex-compiler-example:
    runs-on: ${{ inputs.ubuntu }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Compile
      run: |
         sudo apt-get update
         ${{ inputs.apt-get }}
         mkdir -p -v $HOME/gcc-64
         aria2c -o gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
         tar -C $HOME/gcc-64 -zxf gcc-aarch64.tar.gz
         mkdir -p -v $HOME/gcc-32
         aria2c -o gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
         tar -C $HOME/gcc-32 -zxf gcc-arm.tar.gz
         mkdir $HOME/clang -p -v
         aria2c -o aosp-clang.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/tags/android-11.0.0_r46/clang-r383902b1.tar.gz
         tar -C $HOME/clang -zxf aosp-clang.tar.gz
         git clone --depth=1 ${{ inputs.kernel-source }} -b ${{ inputs.kernel-branch }} kernel-dir
         mkdir out -p -v
         cd kernel-dir
         if [ ${{ inputs.kernelsu }} != false ]; then
            rm -rf KernelSU
            ${{ inputs.kernelsu }}
         fi
         export KBUILD_BUILD_USER="linex"
         export KBUILD_BUILD_HOST="project"
         if [ ${{ inputs.compiler }} == gcc ]; then
            make -j$(nproc --all) ${{ inputs.kernel-config }} ARCH=arm64 O=../out all CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
         elif [ ${{ inputs.compiler }} == clang ]; then
            export PATH=$HOME/clang/bin:$HOME/gcc-64/bin:$HOME/gcc-32:$PATH
            make -j$(nproc --all) ${{ inputs.kernel-config }} ARCH=arm64 O=../out all CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang
         elif [ ${{ inputs.compiler }} == llvm ]; then
            export PATH=$HOME/clang/bin:$HOME/gcc-64/bin:$HOME/gcc-32:$PATH
            make -j$(nproc --all) ${{ inputs.kernel-config }} ARCH=arm64 O=../out all CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang LLVM=1 LLVM_IAS=0 AR=llvm-ar NM=llvm-nm STRIP=llvm-strip OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf HOSTCC=clang HOSTCXX=clang++ HOSTAR=llvm-ar
         fi
    - name: AnyKernel3
      run: |
          git clone https://github.com/osm0sis/AnyKernel3 AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md AnyKernel3/modules AnyKernel3/patch AnyKernel3/ramdisk
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi
    - name: Upload
      run: |
          mkdir Upload
          cp -rf AnyKernel3/* Upload
    - id: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "${{ inputs.name }}"
        path: Upload/*
        
# Enjoy Your Life....
