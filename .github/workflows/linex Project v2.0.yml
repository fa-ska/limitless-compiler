# linex Project
name: linex Project Compiler v2.0
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Name'
        default: '4.9_kernel'
        required: true
        type: string
      compiler:
        description: 'Compiler gcc|clang|llvm|other'
        default: 'gcc'
        required: true
        type: string
      aosp-clang:
        description: 'Clang | Default 19.0.0'
        default: 'https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r530567.tar.gz'
        required: true
        type: string
      package:
        description: 'Package for other compiler'
        default: 'sudo apt-get install --no-install-recommends -y clang gcc gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu libffi-dev libncurses5-dev libreadline-dev libsqlite3-dev pigz libarchive-tools software-properties-common openssl ssh wget nano ca-certificates zstd'
        required: true
        type: string
      command:
        description: 'Command+ for other compiler'
        default: 'CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- CROSS_COMPILE_COMPAT=arm-linux-gnueabi-'
        required: true
        type: string
      kernel-config:
        description: 'Kernel-config'
        default: 'xi_defconfig'
        required: true
        type: string
      kernel-url:
        description: 'Kernel-url'
        default: 'https://github.com/linex-17/Limitless.git'
        required: true
        type: string
      kernel-branch:
        description: 'Kernel-branch'
        default: 'main'
        required: true
        type: string
      kernelsu2:
        description: 'KernelSU | disable if source not compatible'
        default: 'curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next'
        required: true
        type: string
      disable-lto:
        description: 'Disable LTO'
        default: 'true'
        required: true
        type: string
        
jobs:
  linex-compiler-v2:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup
      run: |
         sudo apt-get update
         sudo apt-get install --no-install-recommends -y binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3 aria2
         if [ ${{ inputs.compiler }} == gcc ]; then
             sudo apt-get install --no-install-recommends -y clang gcc gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu libffi-dev libncurses5-dev libreadline-dev libsqlite3-dev pigz libarchive-tools software-properties-common openssl ssh wget nano ca-certificates zstd
         fi
         if [ ${{ inputs.compiler }} == llvm ]; then
             sudo apt-get install --no-install-recommends -y clang gcc gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu libffi-dev libncurses5-dev libreadline-dev libsqlite3-dev pigz libarchive-tools software-properties-common openssl ssh wget nano ca-certificates zstd
             sudo apt-get install --no-install-recommends -y cpio lld llvm g++-aarch64-linux-gnu libelf-dev neofetch
         fi
         if [ ${{ inputs.compiler }} == other ]; then
             ${{ inputs.package }}
         fi
         aria2c -q https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh && NONINTERACTIVE=1 bash ./uninstall.sh -f -q
         if [ -f /bin/swapon ]; then
             export SWAP_FILE=$(swapon --show=NAME | tail -n 1)
             sudo swapoff $SWAP_FILE
             sudo rm $SWAP_FILE
             sudo fallocate -l 16G $SWAP_FILE
             sudo chmod 600 $SWAP_FILE
             sudo mkswap $SWAP_FILE
             sudo swapon $SWAP_FILE
             unset SWAP_FILE
         fi
    
    - name: Setup GCC
      run: |
         mkdir -p -v $HOME/gcc-64
         aria2c -o gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
         tar -C $HOME/gcc-64 -zxf gcc-aarch64.tar.gz
         mkdir -p -v $HOME/gcc-32
         aria2c -o gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
         tar -C $HOME/gcc-32 -zxf gcc-arm.tar.gz
    - name: Setup Clang
      run: |
         if [ "${{ inputs.aosp-clang }}" = "" ]; then
            aria2c -o aosp-clang.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/tags/android-11.0.0_r46/clang-r383902b1.tar.gz
         else
            aria2c -o aosp-clang.tar.gz ${{ inputs.aosp-clang }}
         fi
         mkdir $HOME/clang -p -v
         tar -C $HOME/clang -zxf aosp-clang.tar.gz
    - name: Setup Kernel
      run: |
         git clone --depth=1 ${{ inputs.kernel-url }} -b ${{ inputs.kernel-branch }} kernel-dir
    - name: LTO
      run: |
         cd kernel-dir
         if [ ${{ inputs.disable-lto }} = true ]; then
             if grep -q "LTO" "arch/arm64/configs/${{ inputs.kernel-config }}"
             then
                  sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/arm64/configs/${{ inputs.kernel-config }} 
                  sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/arm64/configs/${{ inputs.kernel-config }} 
                  sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/arm64/configs/${{ inputs.kernel-config }} 
                  echo "CONFIG_LTO_NONE=y" | tee -a arch/arm64/configs/${{ inputs.kernel-config }} >/dev/null
             fi
         fi
    - name: KernelSU Next
      run: |
         if [ ${{ inputs.kernelsu2 }} != false ]; then
            cd kernel-dir
            rm -rf KernelSU
            ${{ inputs.kernelsu2 }}
         fi
    - name: Compile
      run: |
         mkdir out -p -v
         cd kernel-dir
         export PATH=$HOME/clang/bin:$HOME/gcc-64/bin:$HOME/gcc-32:$PATH
         export KBUILD_BUILD_USER="linex"
         export KBUILD_BUILD_HOST="project"
         export SUBLEVEL=$(cat Makefile | grep "PATCHLEVEL =" | awk '{print $3}')
         COMMAND="make -j$(nproc --all) ${{ inputs.kernel-config }} ARCH=arm64 O=../out all"
         if [ ${{ inputs.compiler }} == clang ]; then
            COMMAND+=" CROSS_COMPILE=aarch64-linux-android- COMPILE_ARM32=arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu-"
            COMMAND+=" CC=clang"
         fi
         if [ ${{ inputs.compiler }} == gcc ]; then
            COMMAND+=" CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- CROSS_COMPILE_COMPAT=arm-linux-gnueabi-"
         fi
         if [ ${{ inputs.compiler }} == llvm ]; then
            COMMAND+=" CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- CROSS_COMPILE_COMPAT=arm-linux-gnueabi-"
            COMMAND+=" CC=clang"
            COMMAND+=" AR=llvm-ar LD=ld.lld NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip"
         fi
         if [ ${{ inputs.compiler }} == other ]; then
            COMMAND+=" ${{ inputs.command }}"
         fi
         ${COMMAND}
    - name: Create flashable.zip
      run: |
          git clone https://github.com/osm0sis/AnyKernel3 AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md AnyKernel3/modules AnyKernel3/patch AnyKernel3/ramdisk
          
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi
    - name: Upload
      run: |
          mkdir Upload
          cp -rf AnyKernel3/* Upload
    - id: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "${{ inputs.name }}"
        path: Upload/*
